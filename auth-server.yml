# We need to setup different context root for the auth server so that we can store separate
# cookies for both the API gateway as well as the OAuth2 authorization server.
server:
  port: 8899
  contextPath: /apis 

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8778/eureka/

security:
  user:
    password: password      

# Datasource and JPA configuration to be used for storing the OAuth authorization details 
# and token store
spring:
  datasource:
    url: jdbc:mysql://config-server:3306/auth
    username: root
    password: ibase4j
    driver-class: com.mysql.jdbc.Driver
  
  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    show-sql: false
    hibernate:
      ddl-auto: create

---  

spring:
  profiles: docker
  datasource:
    url: jdbc:mysql://config-center:3306/auth
    username: root
    password: ibase4j
    driver-class: com.mysql.jdbc.Driver
  
  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    show-sql: false
    hibernate:
      ddl-auto: create
      
  jackson:
    serialization:
      INDENT_OUTPUT: true
  
eureka:
  client:
    serviceUrl:
      defaultZone: http://register-center:19512/eureka/,http://register-center:19511/eureka/

security:
  user:
    password: password      

# Datasource and JPA configuration to be used for storing the OAuth authorization details 
# and token store

    
jwt:
  header: X-AEK56-Token
  secret: aek56.com
  expiration: 604800
  route:
    authentication:
      path: auth
      refresh: refresh
      
      
server:
  port: 18899
  contextPath: /apis 
  
---
  
spring:
  # DataSource Config
  profiles: dev
  datasource:
    write:
      url: jdbc:mysql://192.168.1.57:3306/sd?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&useSSL=false
      username: root
      password: Aek56.com
      driver-class-name: com.mysql.jdbc.Driver
      max-active: 20
      initial-size: 1
      min-idle: 3
      max-wait: 60000
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 'x' FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,log4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=3000
      # 合并多个DruidDataSource的监控数据
      #spring.datasource.useGlobalDataSourceStat=true
    read:
      url: jdbc:mysql://192.168.1.57:3306/sd?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&useSSL=false
      username: root
      password: Aek56.com
      driver-class-name: com.mysql.jdbc.Driver
      max-active: 20
      initial-size: 1
      min-idle: 3
      max-wait: 60000
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 'x' FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,log4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=3000
      # 合并多个DruidDataSource的监控数据
      #spring.datasource.useGlobalDataSourceStat=true
  redis:
    database: 3
    host: 192.168.1.57
    #password: # Login password of the redis server.
    port: 6379
    timeout: 0
    pool:
      max-active: 8 #最大连接数
      max-idle: 8 #最大空闲连接数
      max-wait: -1 #最大等待时间
      min-idle: 0 #初始化连接数

  rabbitmq:
    host: svc
    port: 8091
    username: guest
    password: guest
    virtualHost: /
  mail:
    host: xxx
    port: 25
    username: aaa@xxx.com
    password: xxx
    testConnection: false

jwt:
  header: X-AEK56-Token
  secret: aek56.com
  expiration: 604800
  route:
    authentication:
      path: auth
      refresh: refresh
server:
  port: 8085
