# Auth-server instance when used on Docker

refreshtest: zj@aek56.com

env:
  develop: 192.168.1.57
  test: 192.168.1.54
  
  
spring:
  profiles: dev
  cloud:
    client:
      hostname: API-Getway
      ipAddress: 192.168.3.134    
# The OAuth2 server definition that would be used to send the authorization requests to

# Define the port where the API gateway server would be running
server:
  port: 8080
  
authserver:
    hostname: 192.168.3.134
    port: 18085
    contextPath: /apis/    
assetsserver:
    hostname: 192.168.3.52
    port: 9090
    contextPath: /assets/
sys-web:
    hostname: 192.168.3.52
    port: 8090    
    contextPath: /sys/
repair:
    hostname: 192.168.3.91
    port: 9099    
    contextPath: /repair/

zuul:
  routes:
    assets:
      path: /api/assets/**
      stripPrefix: true
      url: http://${assetsserver.hostname}:${assetsserver.port}${assetsserver.contextPath}
    auth:
      path: /api/api_v3/**
      stripPrefix: true
      url: http://${authserver.hostname}:${authserver.port}${authserver.contextPath}
    sys-web:
      path: /api/sys/**
      stripPrefix: true
      url: http://${sys-web.hostname}:${sys-web.port}${sys-web.contextPath}
    repair:
      path: /api/repair/**
      stripPrefix: true
      url: http://${repair.hostname}:${repair.port}${repair.contextPath}    
# Define the Eureka server that handles service registration
eureka: 
  instance:
    status-page-url-path: /swagger-ui.html
    preferIpAddress: true
    ip-address: ${spring.cloud.client.ipAddress}
    instance-id: ${spring.cloud.client.hostname}:${server.port}    
  client: 
    serviceUrl: 
      defaultZone: http://register-center:19512/eureka/,http://register-center:19511/eureka/  


jwt:
  header: X-AEK56-Token
  secret: aek56.com
  expiration: 604800
  route:
    authentication:
      path: auth
      refresh: refresh      

security:
  oauth2:
    sso:
      home:
        secure: false
        path: /,/**/*.html,/hello,/refresh
    client:
      accessTokenUri: http://${authserver.hostname}:${authserver.port}${authserver.contextPath}/oauth/token
      userAuthorizationUri: http://${authserver.hostname}:${authserver.port}${authserver.contextPath}/oauth/authorize
      clientId: aek56.com
      clientSecret: secret
    resource:
      jwt: 
        keyValue: aek56.com


---
# Auth-server instance when used on Docker
spring:
  profiles: test
  cloud:
    client:
      hostname: ${dev-center.hostname}
      ipAddress: 192.168.3.134    
# The OAuth2 server definition that would be used to send the authorization requests to

# Define the port where the API gateway server would be running
server:
  port: 80
  
authserver:
    hostname: ${pre-test.authserver.hostname}
    port: ${pre-test.authserver.port}
    contextPath: ${pre-test.authserver.contextPath}    
assetsserver:
    hostname: ${dev-center.hostname}
    port: 9090
    contextPath: /assets/
sys-web:
    hostname: ${dev-center.hostname}
    port: 8090    
    contextPath: /sys/
repair:
    hostname: ${dev-center.hostname}
    port: 9099    
    contextPath: /repair/

zuul:
  routes:
    assets:
      path: /api/assets/**
      stripPrefix: true
      url: http://${assetsserver.hostname}:${assetsserver.port}${assetsserver.contextPath}
    auth:
      path: /api/api_v3/**
      stripPrefix: true
      url: http://${authserver.hostname}:${authserver.port}${authserver.contextPath}
    sys-web:
      path: /api/sys/**
      stripPrefix: true
      url: http://${sys-web.hostname}:${sys-web.port}${sys-web.contextPath}
    repair:
      path: /api/repair/**
      stripPrefix: true
      url: http://${repair.hostname}:${repair.port}${repair.contextPath}    
# Define the Eureka server that handles service registration
eureka: 
  instance:
    status-page-url-path: /swagger-ui.html
    preferIpAddress: true
    ip-address: ${spring.cloud.client.ipAddress}
    instance-id: ${spring.cloud.client.hostname}:${server.port}    
    lease-renewal-interval-in-seconds: 10
    lease-expiration-duration-in-seconds: 30      
  client: 
    serviceUrl: 
      defaultZone: http://ebey.aek.com:19513/eureka/,http://ebey.aek.com:19514/eureka/ 


jwt:
  header: X-AEK56-Token
  secret: aek56.com
  expiration: 604800
  route:
    authentication:
      path: auth
      refresh: refresh      

security:
  oauth2:
    sso:
      home:
        secure: false
        path: /,/**/*.html,/hello,/refresh
    client:
      accessTokenUri: http://${authserver.hostname}:${authserver.port}${authserver.contextPath}/oauth/token
      userAuthorizationUri: http://${authserver.hostname}:${authserver.port}${authserver.contextPath}/oauth/authorize
      clientId: aek56.com
      clientSecret: secret
    resource:
      jwt: 
        keyValue: aek56.com
